services:
  # ===== ORACLE DB =====
  free23ai:
    image: gvenzl/oracle-free:23.9-slim-faststart
    environment:
      ORACLE_PASSWORD: "Welcome12345"
    ports:
      - "1521:1521"
    restart: unless-stopped
    networks: [ monitoring-network ]

  # ===== ORACLE DB EXPORTER =====
  oracle_exporter:
    image: container-registry.oracle.com/database/observability-exporter:2.1.0
    environment:
      DB_USERNAME: "pdbadmin"
      DB_PASSWORD: "Welcome12345"
      DB_CONNECT_STRING: "free23ai:1521/FREEPDB1"
    ports:
      - "9161:9161"
    depends_on: [ free23ai ]
    restart: unless-stopped
    networks: [ monitoring-network ]

  # ===== MINIO (S3 compatível) =====
  minio:
    image: quay.io/minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: "admin"
      MINIO_ROOT_PASSWORD: "admin12345"
    ports:
      - "9000:9000"  # API S3
      - "9001:9001"  # Console web
    volumes:
      - minio-data:/data
    restart: unless-stopped
    networks: [ monitoring-network ]

  # ===== MINIO INIT (cria buckets uma única vez) =====
  minio-init:
    image: minio/mc:latest
    depends_on: [ minio ]
    entrypoint: >
      /bin/sh -c "
      echo 'Aguardando MinIO...' &&
      until (mc alias set local http://minio:9000 admin admin12345) do sleep 2; done &&
      echo 'Criando buckets...' &&
      mc mb --ignore-existing local/mimir-data &&
      mc mb --ignore-existing local/mimir-rules &&
      echo 'Buckets prontos.'
      "
    networks: [ monitoring-network ]

  # ====== MIMIR (microserviços) ======
  # Use o MESMO arquivo de config para todos (montado em /etc/mimir/mimir.yaml)

  mimir-distributor:
    image: grafana/mimir:latest
    command:
      - "-target=distributor"
      - "-config.file=/etc/mimir/mimir.yaml"
    volumes:
      - ./mimir:/etc/mimir:ro
      - mimir-data:/data
    depends_on: [ minio, minio-init ]
    # Porta opcional para teste (ingest externa). Alloy usa nome DNS interno.
    ports:
      - "9009:9009"
    restart: unless-stopped
    networks: [ monitoring-network ]

  mimir-ingester-1:
    image: grafana/mimir:latest
    command:
      - "-target=ingester"
      - "-config.file=/etc/mimir/mimir.yaml"
    volumes:
      - ./mimir:/etc/mimir:ro
      - ingester-wal-1:/data/ingester-wal
    depends_on: [ minio, minio-init ]
    restart: unless-stopped
    networks: [ monitoring-network ]

  mimir-ingester-2:
    image: grafana/mimir:latest
    command:
      - "-target=ingester"
      - "-config.file=/etc/mimir/mimir.yaml"
    volumes:
      - ./mimir:/etc/mimir:ro
      - ingester-wal-2:/data/ingester-wal
    depends_on: [ minio, minio-init ]
    restart: unless-stopped
    networks: [ monitoring-network ]

  mimir-store-gateway:
    image: grafana/mimir:latest
    command:
      - "-target=store-gateway"
      - "-config.file=/etc/mimir/mimir.yaml"
    volumes:
      - ./mimir:/etc/mimir:ro
      - mimir-data:/data
    depends_on: [ minio, minio-init ]
    restart: unless-stopped
    networks: [ monitoring-network ]

  mimir-compactor:
    image: grafana/mimir:latest
    command:
      - "-target=compactor"
      - "-config.file=/etc/mimir/mimir.yaml"
    volumes:
      - ./mimir:/etc/mimir:ro
      - compactor-data:/data/compactor
    depends_on: [ minio, minio-init ]
    restart: unless-stopped
    networks: [ monitoring-network ]

  mimir-query-frontend:
    image: grafana/mimir:latest
    command:
      - "-target=query-frontend"
      - "-config.file=/etc/mimir/mimir.yaml"
    volumes:
      - ./mimir:/etc/mimir:ro
      - mimir-data:/data
    depends_on: [ mimir-querier ]
    # Porta opcional para acessar de fora (Grafana está no mesmo network, não precisa)
    # ports:
    #   - "9010:9009"
    restart: unless-stopped
    networks: [ monitoring-network ]

  mimir-query-scheduler:
    image: grafana/mimir:latest
    command:
      - "-target=query-scheduler"
      - "-config.file=/etc/mimir/mimir.yaml"
    volumes:
      - ./mimir:/etc/mimir:ro
      - mimir-data:/data
    depends_on: [ minio, minio-init ]
    restart: unless-stopped
    networks: [ monitoring-network ]

  mimir-querier:
    image: grafana/mimir:latest
    command:
      - "-target=querier"
      - "-config.file=/etc/mimir/mimir.yaml"
    volumes:
      - ./mimir:/etc/mimir:ro
      - mimir-data:/data
    depends_on: [ minio, minio-init, mimir-store-gateway ]
    restart: unless-stopped
    networks: [ monitoring-network ]

  mimir-ruler:
    image: grafana/mimir:latest
    command:
      - "-target=ruler"
      - "-config.file=/etc/mimir/mimir.yaml"
    volumes:
      - ./mimir:/etc/mimir:ro
      - mimir-data:/data
    depends_on: [ minio, minio-init ]
    restart: unless-stopped
    networks: [ monitoring-network ]

  # ===== GRAFANA ALLOY (scrape -> remote_write para o Distributor) =====
  alloy:
    image: grafana/alloy:latest
    command: ["run", "--server.http.listen-addr=0.0.0.0:12345", "--storage.path=/var/lib/alloy", "/etc/alloy/config.alloy"]
    volumes:
      - ./alloy.hcl:/etc/alloy/config.alloy:ro
      - alloy-data:/var/lib/alloy
    environment:
      TENANT_ID: "tenant-local"
      RW_URL: "http://mimir-distributor:9009/api/v1/push"
    ports:
      - "12345:12345"
    depends_on:
      - oracle_exporter
      - mimir-distributor
    restart: unless-stopped
    networks: [ monitoring-network ]

  # ===== GRAFANA =====
  grafana:
    image: grafana/grafana-oss:latest
    environment:
      GF_SECURITY_ADMIN_USER: "admin"
      GF_SECURITY_ADMIN_PASSWORD: "admin"
      GF_USERS_ALLOW_SIGN_UP: "false"
    ports:
      - "3000:3000"
    volumes:
      - ./provisioning/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - mimir-query-frontend
    restart: unless-stopped
    networks: [ monitoring-network ]

volumes:
  minio-data:
  mimir-data:
  ingester-wal-1:
  ingester-wal-2:
  compactor-data:
  alloy-data:

networks:
  monitoring-network:
    driver: bridge
